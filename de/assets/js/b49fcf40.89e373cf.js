"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[699],{6719:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>c});var s=t(3917);const o={},i=s.createContext(o);function r(e){const n=s.useContext(i);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:r(e.components),s.createElement(i.Provider,{value:n},e.children)}},8440:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>c,default:()=>u,frontMatter:()=>r,metadata:()=>s,toc:()=>a});const s=JSON.parse('{"id":"techniques/async-configuration","title":"Async Configuration","description":"When you need to pass module options asynchronously instead of statically, use the .forRootAsync() method. As with most dynamic modules, Nest provides several techniques to deal with async configuration.","source":"@site/i18n/de/docusaurus-plugin-content-docs/current/techniques/async-configuration.mdx","sourceDirName":"techniques","slug":"/techniques/async-configuration","permalink":"/de/techniques/async-configuration","draft":false,"unlisted":false,"editUrl":"https://github.com/GlobalArtInc/nestcord/tree/master/docs/content/techniques/async-configuration.mdx","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"id":"async-configuration","title":"Async Configuration","sidebar_position":2},"sidebar":"docsSidebar","previous":{"title":"Sharding","permalink":"/de/techniques/sharding"},"next":{"title":"Standalone application","permalink":"/de/techniques/standalone-application"}}');var o=t(1273),i=t(6719);const r={id:"async-configuration",title:"Async Configuration",sidebar_position:2},c=void 0,d={},a=[];function l(e){const n={a:"a",code:"code",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsxs)(n.p,{children:["When you need to pass module options asynchronously instead of statically, use the ",(0,o.jsx)(n.code,{children:".forRootAsync()"})," method. As with most dynamic modules, Nest provides several techniques to deal with async configuration."]}),"\n",(0,o.jsx)(n.p,{children:"One technique is to use a factory function:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-typescript",metastring:'title="src/app.module.ts"',children:"import { NestCordModule } from '@globalart/nestcord';\nimport { Module } from '@nestjs/common';\nimport { IntentsBitField } from 'discord.js';\n\n@Module({\n    imports: [\n        NestCordModule.forRootAsync({\n            useFactory: () => ({\n                token: 'DISCORD_BOT_TOKEN',\n                intents: [\n                    IntentsBitField.Guilds,\n                    IntentsBitField.GuildMessages,\n                    IntentsBitField.DirectMessages\n                ]\n            })\n        })\n    ]\n})\nexport class AppModule {}\n"})}),"\n",(0,o.jsxs)(n.p,{children:["Like other ",(0,o.jsx)(n.a,{href:"https://docs.nestjs.com/fundamentals/custom-providers#factory-providers-usefactory",children:"factory providers"}),", our factory function can be async and can inject dependencies through inject."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-typescript",metastring:'title="src/app.module.ts"',children:"import { NestCordModule } from '@globalart/nestcord';\nimport { Module } from '@nestjs/common';\nimport { IntentsBitField } from 'discord.js';\n\n@Module({\n    imports: [\n        NestCordModule.forRootAsync({\n            imports: [ConfigModule.forFeature(nestcordModuleConfig)],\n            useFactory: async (configService: ConfigService) => ({\n                token: configService.get<string>('DISCORD_BOT_TOKEN'),\n                intents: [\n                    IntentsBitField.Guilds,\n                    IntentsBitField.GuildMessages,\n                    IntentsBitField.DirectMessages\n                ]\n            }),\n            inject: [ConfigService]\n        })\n    ]\n})\nexport class AppModule {}\n"})}),"\n",(0,o.jsx)(n.p,{children:"Alternatively, you can configure the NestCordModule using a class instead of a factory, as shown below:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-typescript",metastring:'title="src/app.module.ts"',children:"import { NestCordModule } from '@globalart/nestcord';\nimport { Module } from '@nestjs/common';\nimport { IntentsBitField } from 'discord.js';\n\n@Module({\n    imports: [\n        NestCordModule.forRootAsync({\n            useClass: NestCordConfigService\n        })\n    ]\n})\nexport class AppModule {}\n"})}),"\n",(0,o.jsxs)(n.p,{children:["The construction above instantiates ",(0,o.jsx)(n.code,{children:"NestCordConfigService"})," inside ",(0,o.jsx)(n.code,{children:"NestCordModule"}),", using it to create the required options object. Note that in this example, the ",(0,o.jsx)(n.code,{children:"NestCordConfigService"})," has to implement the ",(0,o.jsx)(n.code,{children:"NestCordOptionsFactory"})," interface, as shown below. The ",(0,o.jsx)(n.code,{children:"NestCordModule"})," will call the ",(0,o.jsx)(n.code,{children:".createNestCordOptions()"})," method on the instantiated object of the supplied class."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-typescript",metastring:'title="src/discord-config.service.ts"',children:"import { Injectable } from '@nestjs/common';\nimport { NestCordOptionsFactory, NestCordModuleOptions } from '@globalart/nestcord';\nimport { IntentsBitField } from 'discord.js';\n\n@Injectable()\nclass NestCordConfigService {\n    createNestCordOptions(): NestCordModuleOptions {\n        return {\n            token: 'DISCORD_BOT_TOKEN',\n            intents: [\n                IntentsBitField.Guilds,\n                IntentsBitField.GuildMessages,\n                IntentsBitField.DirectMessages\n            ]\n        };\n    }\n}\n"})}),"\n",(0,o.jsxs)(n.p,{children:["If you want to reuse an existing options provider instead of creating a private copy inside the ",(0,o.jsx)(n.code,{children:"NestCordModule"}),", use the ",(0,o.jsx)(n.code,{children:"useExisting"})," syntax."]})]})}function u(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(l,{...e})}):l(e)}}}]);