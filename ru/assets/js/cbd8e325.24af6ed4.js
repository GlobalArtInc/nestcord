"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[131],{4498:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>h,frontMatter:()=>d,metadata:()=>n,toc:()=>l});const n=JSON.parse('{"id":"packages/stat-reporter","title":"Stat Reporter","description":"Is a lightweight stat reporter module for NestCord. This module sends data from your bot to different monitoring bot services.","source":"@site/i18n/ru/docusaurus-plugin-content-docs/current/packages/stat-reporter.mdx","sourceDirName":"packages","slug":"/packages/stat-reporter","permalink":"/ru/packages/stat-reporter","draft":false,"unlisted":false,"editUrl":"https://github.com/GlobalArtInc/nestcord/tree/master/docs/content/packages/stat-reporter.mdx","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"id":"stat-reporter","title":"Stat Reporter","sidebar_position":2},"sidebar":"docsSidebar","previous":{"title":"\u041b\u043e\u043a\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f","permalink":"/ru/packages/localization"},"next":{"title":"Lavalink","permalink":"/ru/packages/lavalink"}}');var s=r(1273),o=r(6719);const d={id:"stat-reporter",title:"Stat Reporter",sidebar_position:2},i=void 0,c={},l=[{value:"Usage",id:"usage",level:2},{value:"Global Options",id:"global-options",level:3}];function a(e){const t={code:"code",h2:"h2",h3:"h3",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.p,{children:"Is a lightweight stat reporter module for NestCord. This module sends data from your bot to different monitoring bot services."}),"\n",(0,s.jsx)(t.h2,{id:"usage",children:"Usage"}),"\n",(0,s.jsxs)(t.p,{children:["Once the installation process is complete, we can import the ",(0,s.jsx)(t.code,{children:"NestCordStatReporterModule"})," with your ",(0,s.jsx)(t.code,{children:"NestCordModule"})," into the root ",(0,s.jsx)(t.code,{children:"AppModule"}),":"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-typescript",children:"import { Module } from '@nestjs/common';\nimport { AppService } from './app.service';\nimport { NestCordModule, \n         NestCordStatReporterModule, \n         StatCronExpression, \n         NestCordLocalizationModule, \n         DefaultLocalizationAdapter, \n         UserResolver \n} from '@globalart/nestcord';\n\n@Module({\n    imports: [\n      NestCordModule.forRoot({\n        token: process.env.DISCORD_TOKEN,\n          intents: [\n          IntentsBitField.Flags.Guilds,\n          IntentsBitField.Flags.DirectMessages,\n          IntentsBitField.Flags.GuildMembers,\n          IntentsBitField.Flags.GuildMessages,\n          IntentsBitField.Flags.MessageContent\n        ],\n        prefix: '!',\n        development: [process.env.DISCORD_TEST_GUILD]\n      }),\n      NestCordStatReporterModule.forRoot({\n        services: [\n          {\n            name: 'top.gg',\n            actions: [\n              {\n                name: 'name of the action',\n                url: 'https://top.gg/bots/:bot_id/stats',\n                bodyData: { server_count: '{{serverCount}}', shard_count: '{{shardCount}}' },\n              }\n            ],\n            headerData: { Authorization: process.env.TOP_GG_TOKEN },\n            schedule: StatCronExpression.EVERY_5_MINUTES // or you can use crontab expression like */1 * * * * ,\n          },\n        ],\n      }),\n    ],\n    providers: [AppService]\n})\nexport class AppModule {\n}\n"})}),"\n",(0,s.jsxs)(t.p,{children:["In ",(0,s.jsx)(t.code,{children:"services"}),", all the services on which the bot is monitored should be listed, and the request body should be passed. ",(0,s.jsx)(t.code,{children:"{{serverCount}}"})," and ",(0,s.jsx)(t.code,{children:"{{shardCount}}"})," will be automatically replaced."]}),"\n",(0,s.jsx)(t.h3,{id:"global-options",children:"Global Options"}),"\n",(0,s.jsx)(t.p,{children:"NestCordStatReporterModule interface:"}),"\n",(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{children:"Property"}),(0,s.jsx)(t.th,{children:"Type"}),(0,s.jsx)(t.th,{children:"Description"})]})}),(0,s.jsxs)(t.tbody,{children:[(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"services"})}),(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"ServiceOption[]"})}),(0,s.jsx)(t.td,{children:"Services"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"proxy"})}),(0,s.jsxs)(t.td,{children:[(0,s.jsx)(t.code,{children:"AxiosProxyConfig"})," or ",(0,s.jsx)(t.code,{children:"undefined"})]}),(0,s.jsx)(t.td,{children:"Proxy config"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"development"})}),(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"boolean"})}),(0,s.jsx)(t.td,{children:"If true, module will disable"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"log"})}),(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"boolean"})}),(0,s.jsx)(t.td,{children:"Send log when sended the stats"})]})]})]}),"\n",(0,s.jsx)(t.p,{children:"ServiceOption interface:"}),"\n",(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{children:"Property"}),(0,s.jsx)(t.th,{children:"Type"}),(0,s.jsx)(t.th,{children:"Description"})]})}),(0,s.jsxs)(t.tbody,{children:[(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"name"})}),(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"string"})}),(0,s.jsx)(t.td,{children:"Service Name"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"url"})}),(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"string"})}),(0,s.jsx)(t.td,{children:"API URL for posting the stats"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"proxy"})}),(0,s.jsxs)(t.td,{children:[(0,s.jsx)(t.code,{children:"AxiosProxyConfig"})," or ",(0,s.jsx)(t.code,{children:"undefined"})]}),(0,s.jsx)(t.td,{children:"Proxy config"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"bodyData"})}),(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"object"})}),(0,s.jsx)(t.td,{children:"Body Data"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"headerData"})}),(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"object"})}),(0,s.jsx)(t.td,{children:"Header Data"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"schedule"})}),(0,s.jsxs)(t.td,{children:[(0,s.jsx)(t.code,{children:"StatCronExpression"})," or ",(0,s.jsx)(t.code,{children:"string"})]}),(0,s.jsx)(t.td,{children:"Crontab Expression"})]})]})]}),"\n",(0,s.jsx)(t.p,{children:"Congratulations! You have successfully register cronjob with NestCord!"})]})}function h(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(a,{...e})}):a(e)}},6719:(e,t,r)=>{r.d(t,{R:()=>d,x:()=>i});var n=r(3917);const s={},o=n.createContext(s);function d(e){const t=n.useContext(o);return n.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:d(e.components),n.createElement(o.Provider,{value:t},e.children)}}}]);