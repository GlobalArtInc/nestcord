"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[898],{1493:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>r,contentTitle:()=>l,default:()=>p,frontMatter:()=>s,metadata:()=>o,toc:()=>c});const o=JSON.parse('{"id":"packages/localization","title":"Localization","description":"Is a lightweight localization module for NestCord. It allows you to easily localize your bot\'s","source":"@site/content/packages/localization.mdx","sourceDirName":"packages","slug":"/packages/localization","permalink":"/packages/localization","draft":false,"unlisted":false,"editUrl":"https://github.com/GlobalArtInc/nestcord/tree/master/docs/content/packages/localization.mdx","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"id":"localization","title":"Localization","sidebar_position":2},"sidebar":"docsSidebar","previous":{"title":"Pagination","permalink":"/packages/pagination"},"next":{"title":"Stat Reporter","permalink":"/packages/stat-reporter"}}');var a=t(1273),i=t(6719);const s={id:"localization",title:"Localization",sidebar_position:2},l=void 0,r={},c=[{value:"Usage",id:"usage",level:2},{value:"Adapters",id:"adapters",level:2},{value:"Custom Adapters",id:"custom-adapters",level:4},{value:"Resolvers",id:"resolvers",level:2},{value:"Custom Resolvers",id:"custom-resolvers",level:4},{value:"Localization",id:"localization",level:2},{value:"Setting up localized commands",id:"setting-up-localized-commands",level:4},{value:"Update localization without restarting the app",id:"update-localization-without-restarting-the-app",level:2}];function d(n){const e={a:"a",admonition:"admonition",code:"code",h2:"h2",h4:"h4",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,i.R)(),...n.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsxs)(e.p,{children:["Is a lightweight localization module for ",(0,a.jsx)(e.a,{href:"https://nestcord.js.org/",children:"NestCord"}),". It allows you to easily localize your bot's\ncommands and messages. The module provides a simple API for managing locales and translations, as well as a powerful localization adapter\nsystem."]}),"\n",(0,a.jsx)(e.h2,{id:"usage",children:"Usage"}),"\n",(0,a.jsxs)(e.p,{children:["Once the installation process is complete, we can import the ",(0,a.jsx)(e.code,{children:"NestCordLocalizationModule"})," with your ",(0,a.jsx)(e.code,{children:"NestCordModule"})," into the root ",(0,a.jsx)(e.code,{children:"AppModule"}),":"]}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-typescript",children:"import { NestCordModule } from '@globalart/nestcord';\nimport { Module } from '@nestjs/common';\nimport { NestCordLocalizationModule, DefaultLocalizationAdapter, UserResolver } from '@globalart/nestcord';\nimport { AppService } from './app.service';\n\n@Module({\n    imports: [\n        NestCordModule.forRoot({\n            token: process.env.DISCORD_TOKEN,\n            intents: [\n                IntentsBitField.Flags.Guilds,\n                IntentsBitField.Flags.DirectMessages,\n                IntentsBitField.Flags.GuildMembers,\n                IntentsBitField.Flags.GuildMessages,\n                IntentsBitField.Flags.MessageContent\n            ],\n            prefix: '!',\n            development: [process.env.DISCORD_TEST_GUILD]\n        }),\n        NestCordLocalizationModule.forRoot({\n            resolvers: UserResolver,\n            // Also you can provide class for support injection by @Inject\n            adapter: new DefaultLocalizationAdapter({\n                fallbackLocale: 'en-US',\n                locales: {\n                    'en-US': {\n                        'commands.ping.name': 'ping',\n                        'commands.ping.description': 'Pong!'\n                    },\n                    ru: {\n                        'commands.ping.name': '\u043f\u0438\u043d\u0433',\n                        'commands.ping.description': '\u041f\u043e\u043d\u0433!'\n                    }\n                }\n            })\n        })\n    ],\n    providers: [AppService]\n})\nexport class AppModule {\n}\n"})}),"\n",(0,a.jsx)(e.h2,{id:"adapters",children:"Adapters"}),"\n",(0,a.jsxs)(e.p,{children:["The ",(0,a.jsx)(e.code,{children:"DefaultLocalizationAdapter"})," is a simple adapter that allows you to provide a map of locales and translations."]}),"\n",(0,a.jsxs)(e.p,{children:["Also you can use the ",(0,a.jsx)(e.code,{children:"NestedLocalizationAdapter"})," that allows you to organize translation keys into objects"]}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-typescript",children:"import { NestCordLocalizationModule, NestedLocalizationAdapter, UserResolver } from '@globalart/nestcord/localization';\n\nNestCordLocalizationModule.forRoot({\n    resolvers: UserResolver,\n    adapter: new NestedLocalizationAdapter({\n        fallbackLocale: 'en-US',\n        locales: {\n            'en-US': {\n                'commands': {\n                    'ping': {\n                        'name': 'ping',\n                        'description': 'Pong!'\n                    }\n                }\n            },\n            ru: {\n                'commands': {\n                    'ping': {\n                        'name': '\u043f\u0438\u043d\u0433',\n                        'description': '\u041f\u043e\u043d\u0433!'\n                    }\n                }\n            }\n        }\n    })\n})\n\n"})}),"\n",(0,a.jsx)(e.admonition,{type:"info",children:(0,a.jsxs)(e.p,{children:[(0,a.jsx)(e.code,{children:"DefaultLocalizationAdapter"})," and ",(0,a.jsx)(e.code,{children:"NestedLocalizationAdapter"})," can translate your localization strings and placeholders (e.g ",(0,a.jsx)(e.code,{children:"{{username}}"}),")"]})}),"\n",(0,a.jsx)(e.h4,{id:"custom-adapters",children:"Custom Adapters"}),"\n",(0,a.jsxs)(e.p,{children:["Also, you can create your own localization adapter. Just implement the ",(0,a.jsx)(e.code,{children:"BaseLocalizationAdapter"})," interface:"]}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-typescript",children:"import { BaseLocalizationAdapter } from '@globalart/nestcord/localization';\n\ninterface CustomLocalizationOptions {\n    fallbackLocale: string;\n    locales: Record<string, Record<string, string>>;\n}\n\nexport class CustomLocalizationAdapter extends BaseLocalizationAdapter<CustomLocalizationOptions> {\n    public getTranslation(key: string, locale: string, ...args: unknown[]): string {\n        return `${key} by ${locale}`;\n    }\n}\n"})}),"\n",(0,a.jsx)(e.h2,{id:"resolvers",children:"Resolvers"}),"\n",(0,a.jsxs)(e.p,{children:["Resolvers are used to get the locale for translation. By default, NestCord provides two resolvers: ",(0,a.jsx)(e.code,{children:"UserResolver"})," and ",(0,a.jsx)(e.code,{children:"GuildResolver"}),"."]}),"\n",(0,a.jsxs)(e.table,{children:[(0,a.jsx)(e.thead,{children:(0,a.jsxs)(e.tr,{children:[(0,a.jsx)(e.th,{children:"Resolver"}),(0,a.jsx)(e.th,{children:"Description"})]})}),(0,a.jsxs)(e.tbody,{children:[(0,a.jsxs)(e.tr,{children:[(0,a.jsx)(e.td,{children:"UserResolver"}),(0,a.jsxs)(e.td,{children:["Gets the locale from the user's locale property (",(0,a.jsx)(e.code,{children:"interaction.locale"}),")"]})]}),(0,a.jsxs)(e.tr,{children:[(0,a.jsx)(e.td,{children:"GuildResolver"}),(0,a.jsxs)(e.td,{children:["Gets the locale from the guild's locale property (",(0,a.jsx)(e.code,{children:"interaction.guildLocale"}),")"]})]})]})]}),"\n",(0,a.jsx)(e.h4,{id:"custom-resolvers",children:"Custom Resolvers"}),"\n",(0,a.jsxs)(e.p,{children:["Also, you can create your own Resolver. Just implement the ",(0,a.jsx)(e.code,{children:"LocaleResolver"})," interface:"]}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-typescript",children:"import { CommandContext, LocaleResolver } from '@globalart/nestcord';\nimport { ExecutionContext, Injectable } from '@nestjs/common';\nimport { NestCordExecutionContext } from '@globalart/nestcord';\n\n@Injectable()\nexport class GuildResolver implements LocaleResolver {\n    resolve(context: ExecutionContext): string | string[] | undefined {\n        const nestcordContext = NestCordExecutionContext.create(context);\n        const [interaction] = nestcordContext.getContext<CommandContext>();\n\n        return interaction.guildLocale;\n    }\n}\n"})}),"\n",(0,a.jsx)(e.h2,{id:"localization",children:"Localization"}),"\n",(0,a.jsxs)(e.p,{children:["We can inject the ",(0,a.jsx)(e.code,{children:"LOCALIZATION_ADAPTER"})," into our service and use it to localize our commands and messages:"]}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-typescript",metastring:'title="src/app.gateway.ts"',children:"import { Injectable, Inject, OnModuleInit } from '@nestjs/common';\nimport { DefaultLocalizationAdapter, localizationMapByKey, LOCALIZATION_ADAPTER } from '@globalart/nestcord';\nimport { Context, SlashCommand, SlashCommandContext } from '@globalart/nestcord';\n\n@Injectable()\nexport class AppService implements OnModuleInit {\n    public constructor(\n        @Inject(LOCALIZATION_ADAPTER)\n        private readonly localizationAdapter: DefaultLocalizationAdapter\n    ) {\n    }\n\n    @SlashCommand({\n        name: 'ping',\n        description: 'Pong!',\n        nameLocalizations: localizationMapByKey('commands.ping.name'),\n        descriptionLocalizations: localizationMapByKey('commands.ping.name')\n    })\n    public ping(@Context() [interaction]: SlashCommandContext) {\n        const message = this.localizationAdapter.getTranslation(\n            'commands.ping.description',\n            interaction.locale\n        );\n        return interaction.reply(message);\n    }\n}\n"})}),"\n",(0,a.jsxs)(e.p,{children:["Or you can use ",(0,a.jsx)(e.code,{children:"translate"})," function from the localization adapter:"]}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-typescript",metastring:'title="src/app.gateway.ts"',children:"import { Injectable, Inject, OnModuleInit } from '@nestjs/common';\nimport { DefaultLocalizationAdapter, localizationMapByKey, LOCALIZATION_ADAPTER } from '@globalart/nestcord';\nimport { Context, SlashCommand, SlashCommandContext } from '@globalart/nestcord';\n\n@Injectable()\nexport class AppService implements OnModuleInit {\n    public constructor(\n        @Inject(LOCALIZATION_ADAPTER)\n        private readonly localizationAdapter: DefaultLocalizationAdapter\n    ) {\n    }\n\n    @SlashCommand({\n        name: 'ping',\n        description: 'Pong!',\n        nameLocalizations: localizationMapByKey('commands.ping.name'),\n        descriptionLocalizations: localizationMapByKey('commands.ping.name')\n    })\n    public ping(@Context() [interaction]: SlashCommandContext) {\n        const message = this.localizationAdapter.translate(\n            'commands.ping.description',\n        );\n        return interaction.reply(message);\n    }\n}\n"})}),"\n",(0,a.jsxs)(e.p,{children:["Or you can use ",(0,a.jsx)(e.code,{children:"@CurrentTranslate"})," decorator to get the current translation from context:"]}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-typescript",children:"import { Injectable, Inject, OnModuleInit } from '@nestjs/common';\nimport { DefaultLocalizationAdapter, CurrentTranslate, localizationMapByKey, TranslationFn } from '@globalart/nestcord/localization';\nimport { Context, SlashCommand, SlashCommandContext } from '@globalart/nestcord';\n\n@Injectable()\nexport class AppService implements OnModuleInit {\n    @SlashCommand({\n        name: 'ping',\n        description: 'Pong!',\n        nameLocalizations: localizationMapByKey('commands.ping.name'),\n        descriptionLocalizations: localizationMapByKey('commands.ping.name')\n    })\n    public ping(\n        @Context() [interaction]: SlashCommandContext,\n        @CurrentTranslate() t: TranslationFn\n    ) {\n        const message = t('commands.ping.description');\n        return interaction.reply(message);\n    }\n}\n"})}),"\n",(0,a.jsx)(e.admonition,{type:"info",children:(0,a.jsxs)(e.p,{children:["Function ",(0,a.jsx)(e.code,{children:"localizationMapByKey"})," are used to localize the command name and description. You pass the translation key or localization map as\nan argument to the function."]})}),"\n",(0,a.jsx)(e.h4,{id:"setting-up-localized-commands",children:"Setting up localized commands"}),"\n",(0,a.jsx)(e.p,{children:"You can set what locales the command will be localized"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-typescript",children:"@SlashCommand({\n    name: 'ping',\n    description: 'Pong!',\n    nameLocalizations: localizationMapByKey('commands.ping.name', ['en', 'ru']),\n    descriptionLocalizations: localizationMapByKey('commands.ping.name', ['en', 'ru'])\n})\n"})}),"\n",(0,a.jsxs)(e.p,{children:["Or just pass a localization object with the location id and translation key to the ",(0,a.jsx)(e.code,{children:"nameLocalization"})," and ",(0,a.jsx)(e.code,{children:"descriptionLocalizations"}),"\nproperties"]}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-typescript",children:"@SlashCommand({\n    name: 'ping',\n    description: 'Pong!',\n    nameLocalizations: {\n        en: 'command.ping.name',\n        ru: 'command.ping.name'\n    },\n    descriptionLocalizations: {\n        en: 'command.ping.description',\n        ru: 'command.ping.description'\n    }\n})\n"})}),"\n",(0,a.jsx)(e.h2,{id:"update-localization-without-restarting-the-app",children:"Update localization without restarting the app"}),"\n",(0,a.jsxs)(e.p,{children:["If you get translations from the external API, for example, crowdin, weblate, or another translation services.\nYou can update it just call the ",(0,a.jsx)(e.code,{children:"localizationService"})]}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-typescript",children:"import {\n  Context,\n  NestCordLocalizationService,\n  SlashCommand,\n  SlashCommandContext,\n} from '@globalart/nestcord';\n\nexport class AppService {\n  constructor(\n    private readonly nestCordLocalizationService: NestCordLocalizationService,\n  ) {}\n\n  @SlashCommand({\n    name: 'update_translations',\n    description: 'Update translations',\n  })\n  updateTranslations(@Context() [interaction]: SlashCommandContext) {\n    // Get data from API\n\n    this.nestCordLocalizationService.updateLocales({\n      // static translates for test or you can put it from API\n      'en-US': {\n        'commands.ping.description': 'My new translation',\n      },\n    });\n\n    return interaction.reply({ content: \"Updated successful\" });\n  }\n}\n"})}),"\n",(0,a.jsx)(e.p,{children:"Congratulations! You have successfully created your first localized command with NestCord!"})]})}function p(n={}){const{wrapper:e}={...(0,i.R)(),...n.components};return e?(0,a.jsx)(e,{...n,children:(0,a.jsx)(d,{...n})}):d(n)}},6719:(n,e,t)=>{t.d(e,{R:()=>s,x:()=>l});var o=t(3917);const a={},i=o.createContext(a);function s(n){const e=o.useContext(i);return o.useMemo(function(){return"function"==typeof n?n(e):{...e,...n}},[e,n])}function l(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(a):n.components||a:s(n.components),o.createElement(i.Provider,{value:e},n.children)}}}]);