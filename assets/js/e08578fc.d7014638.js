"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[3121],{4112:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>r,default:()=>p,frontMatter:()=>i,metadata:()=>o,toc:()=>d});const o=JSON.parse('{"id":"interactions/modals","title":"Modals","description":"With modals you can create pop-up forms that allow users to provide you with formatted inputs through submissions. We\'ll cover how to create, show, and receive modal forms using nestcord","source":"@site/content/interactions/modals.mdx","sourceDirName":"interactions","slug":"/interactions/modals","permalink":"/interactions/modals","draft":false,"unlisted":false,"editUrl":"https://github.com/GlobalArtInc/nestcord/tree/master/docs/content/interactions/modals.mdx","tags":[],"version":"current","sidebarPosition":4,"frontMatter":{"id":"modals","title":"Modals","sidebar_position":4},"sidebar":"docsSidebar","previous":{"title":"Message Components","permalink":"/interactions/message-components"},"next":{"title":"Text Commands","permalink":"/text-commands"}}');var a=n(7968),s=n(4318);const i={id:"modals",title:"Modals",sidebar_position:4},r=void 0,l={},d=[{value:"Dynamic Modal",id:"dynamic-modal",level:3}];function c(e){const t={a:"a",code:"code",h3:"h3",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.p,{children:"With modals you can create pop-up forms that allow users to provide you with formatted inputs through submissions. We'll cover how to create, show, and receive modal forms using nestcord"}),"\n",(0,a.jsx)("img",{src:"/img/content/modal.png",alt:"Modal",width:"500"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-typescript",metastring:'title="src/app.modals.ts"',children:"import { Injectable } from '@nestjs/common';\nimport { Context, Modal, ModalContext } from '@globalart/nestcord';\n\n@Injectable()\nexport class AppModals {\n    @Modal('pizza')\n    public onModal(@Ctx() [interaction]: ModalContext) {\n      return interaction.reply({\n        content: `Your fav pizza : ${interaction.fields.getTextInputValue('pizza')}`\n      });\n    }\n}\n"})}),"\n",(0,a.jsx)(t.h3,{id:"dynamic-modal",children:"Dynamic Modal"}),"\n",(0,a.jsxs)(t.p,{children:["You can create modals with dynamic ",(0,a.jsx)(t.code,{children:"id"})," field. This is useful for passing metadata to modals."]}),"\n",(0,a.jsxs)(t.p,{children:["Dynamic modals uses ",(0,a.jsx)(t.a,{href:"https://www.npmjs.com/package/path-to-regexp",children:"path-to-regexp"})," format to perform regexp matching. Turn a path string such as ",(0,a.jsx)(t.code,{children:"user/:name"})," into a regular expression."]}),"\n",(0,a.jsx)(t.p,{children:"To create a Dynamic modal"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-typescript",children:"new ModalBuilder()\n  .setTitle('What your fav pizza?')\n  .setCustomId('pizza/12345')\n  .setComponents([\n    new ActionRowBuilder<ModalActionRowComponentBuilder>().addComponents([\n      new TextInputBuilder()\n        .setCustomId('pizza')\n        .setLabel('???')\n        .setStyle(TextInputStyle.Paragraph)\n    ])\n  ])\n"})}),"\n",(0,a.jsx)(t.p,{children:"To receive a Dynamic modal"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-typescript",metastring:'title="src/app.modals.ts"',children:"import { Injectable } from '@nestjs/common';\nimport { Context, Modal, ModalContext,ModalParam } from '@globalart/nestcord';\n\n@Injectable()\nexport class AppModals {\n    @Modal('pizza/:value')\n    public onModal(@Ctx() [interaction]: ModalContext, @ModalParam('value') value: string) {\n      return interaction.reply({\n        content: `Your fav pizza ${value} : ${interaction.fields.getTextInputValue('pizza')}`\n      });\n    }\n}\n"})})]})}function p(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(c,{...e})}):c(e)}}}]);