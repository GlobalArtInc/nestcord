"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[795],{1134:(e,n,t)=>{t.d(n,{R:()=>l,x:()=>r});var o=t(3917);const s={},i=o.createContext(s);function l(e){const n=o.useContext(i);return o.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:l(e.components),o.createElement(i.Provider,{value:n},e.children)}},4014:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>r,default:()=>m,frontMatter:()=>l,metadata:()=>o,toc:()=>d});const o=JSON.parse('{"id":"interactions/slash-commands","title":"Slash Commands","description":"Slash Commands are the new, exciting way to build and interact with bots on Discord. With Slash Commands, all you have to do is","source":"@site/content/interactions/slash-commands.mdx","sourceDirName":"interactions","slug":"/interactions/slash-commands","permalink":"/interactions/slash-commands","draft":false,"unlisted":false,"editUrl":"https://github.com/GlobalArtInc/nestcord/tree/master/docs/content/interactions/slash-commands.mdx","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"id":"slash-commands","title":"Slash Commands","sidebar_position":1},"sidebar":"docsSidebar","previous":{"title":"Listeners","permalink":"/listeners"},"next":{"title":"Context Menus","permalink":"/interactions/context-menus"}}');var s=t(1273),i=t(1134);const l={id:"slash-commands",title:"Slash Commands",sidebar_position:1},r=void 0,c={},d=[{value:"Global Commands",id:"global-commands",level:2},{value:"Guild Commands",id:"guild-commands",level:2},{value:"Options",id:"options",level:2},{value:"Autocomplete",id:"autocomplete",level:2},{value:"Groups",id:"groups",level:2}];function a(e){const n={a:"a",admonition:"admonition",blockquote:"blockquote",code:"code",h2:"h2",mdxAdmonitionTitle:"mdxAdmonitionTitle",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Slash Commands"})," are the new, exciting way to build and interact with bots on ",(0,s.jsx)(n.strong,{children:"Discord"}),". With Slash Commands, all you have to do is\ntype ",(0,s.jsx)(n.code,{children:"/"})," and you're ready to use your favorite bot. You can easily see all the commands a bot has, and validation and error handling help\nyou get the command right the first time."]}),"\n",(0,s.jsx)(n.h2,{id:"global-commands",children:"Global Commands"}),"\n",(0,s.jsxs)(n.admonition,{type:"tip",children:[(0,s.jsx)(n.p,{children:"Global commands are cached for one hour. New global commands will fan out slowly across all guilds and will only be guaranteed to be updated\nafter an hour. Guild commands update instantly. As such, we recommend you use guild-based commands during development and publish them to\nglobal commands when they're ready for public use."}),(0,s.jsx)(n.p,{children:(0,s.jsx)(n.a,{href:"/start#development",children:"Read more about dev-mode configuration"})})]}),"\n",(0,s.jsxs)(n.p,{children:["Create ",(0,s.jsx)(n.code,{children:"app.commands.ts"})," file and add method with ",(0,s.jsx)(n.code,{children:"SlashCommand"})," decorator."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",metastring:'title="src/app.commands.ts"',children:"import { Injectable } from '@nestjs/common';\nimport { Context, SlashCommand, SlashCommandContext } from '@globalart/nestcord';\n\n@Injectable()\nexport class AppCommands {\n    @SlashCommand({\n        name: 'ping',\n        description: 'Ping-Pong Command'\n    })\n    public async onPing(@Context() [interaction]: SlashCommandContext) {\n        return interaction.reply({ content: 'Pong!' });\n    }\n}\n"})}),"\n",(0,s.jsx)(n.h2,{id:"guild-commands",children:"Guild Commands"}),"\n",(0,s.jsxs)(n.p,{children:["If you want to have guild specific commands, use the ",(0,s.jsx)(n.code,{children:"guilds"})," property on the ",(0,s.jsx)(n.code,{children:"SlashCommand"})," decorator"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",metastring:'title="src/app.commands.ts"',children:"import { Injectable } from '@nestjs/common';\nimport { Context, SlashCommand, SlashCommandContext } from '@globalart/nestcord';\n\n@Injectable()\nexport class AppCommands {\n    @SlashCommand({\n        name: 'ping',\n        description: 'Ping-Pong Command',\n        guilds: [process.env.DEV_GUILD]\n    })\n    public async onPing(@Context() [interaction]: SlashCommandContext) {\n        return interaction.reply({ content: 'Pong!' });\n    }\n}\n"})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:"You can use decorator on both method and class."}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"options",children:"Options"}),"\n",(0,s.jsxs)(n.p,{children:["Use the option decorator to define a parameter in a slash command, let's create the ",(0,s.jsx)(n.code,{children:"LengthDto"})," class:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",metastring:'title="length.dto.ts"',children:"import { StringOption } from '@globalart/nestcord';\n\nexport class TextDto {\n    @StringOption({\n        name: 'text',\n        description: 'Your text',\n        required: true\n    })\n    text: string;\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["It has only one basic properties. Thereafter we can use the newly created DTO inside the ",(0,s.jsx)(n.code,{children:"AppCommands"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",metastring:'title="app.commands.ts"',children:"import { Injectable } from '@nestjs/common';\nimport { Context, SlashCommand, Options, SlashCommandContext } from '@globalart/nestcord';\nimport { TextDto } from './length.dto';\n\n@Injectable()\nexport class AppCommands {\n    @SlashCommand({\n        name: 'length',\n        description: 'Get length of text'\n    })\n    public async onLength(@Context() [interaction]: SlashCommandContext, @Options() { text }: TextDto) {\n        return interaction.reply({content: `Length of your text ${text.length}`});\n    }\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"List of all built-in option decorators:"}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{style:{textAlign:"left"},children:"Decorator"}),(0,s.jsx)(n.th,{style:{textAlign:"left"},children:"Type"}),(0,s.jsx)(n.th,{style:{textAlign:"left"},children:"Description"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{style:{textAlign:"left"},children:(0,s.jsx)(n.code,{children:"StringOption"})}),(0,s.jsx)(n.td,{style:{textAlign:"left"},children:(0,s.jsx)(n.code,{children:"string"})}),(0,s.jsx)(n.td,{style:{textAlign:"left"},children:"A string option"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{style:{textAlign:"left"},children:(0,s.jsx)(n.code,{children:"NumberOption"})}),(0,s.jsx)(n.td,{style:{textAlign:"left"},children:(0,s.jsx)(n.code,{children:"number"})}),(0,s.jsx)(n.td,{style:{textAlign:"left"},children:"A number option"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{style:{textAlign:"left"},children:(0,s.jsx)(n.code,{children:"IntegerOption"})}),(0,s.jsx)(n.td,{style:{textAlign:"left"},children:(0,s.jsx)(n.code,{children:"number"})}),(0,s.jsx)(n.td,{style:{textAlign:"left"},children:"An integer option"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{style:{textAlign:"left"},children:(0,s.jsx)(n.code,{children:"BooleanOption"})}),(0,s.jsx)(n.td,{style:{textAlign:"left"},children:(0,s.jsx)(n.code,{children:"boolean"})}),(0,s.jsx)(n.td,{style:{textAlign:"left"},children:"A boolean option"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{style:{textAlign:"left"},children:(0,s.jsx)(n.code,{children:"UserOption"})}),(0,s.jsx)(n.td,{style:{textAlign:"left"},children:(0,s.jsx)(n.code,{children:"User"})}),(0,s.jsx)(n.td,{style:{textAlign:"left"},children:"A user option"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{style:{textAlign:"left"},children:(0,s.jsx)(n.code,{children:"MemberOption"})}),(0,s.jsx)(n.td,{style:{textAlign:"left"},children:(0,s.jsx)(n.code,{children:"GuildMember"})}),(0,s.jsx)(n.td,{style:{textAlign:"left"},children:"A member option"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{style:{textAlign:"left"},children:(0,s.jsx)(n.code,{children:"ChannelOption"})}),(0,s.jsx)(n.td,{style:{textAlign:"left"},children:(0,s.jsx)(n.code,{children:"GuildChannel"})}),(0,s.jsx)(n.td,{style:{textAlign:"left"},children:"A channel option"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{style:{textAlign:"left"},children:(0,s.jsx)(n.code,{children:"RoleOption"})}),(0,s.jsx)(n.td,{style:{textAlign:"left"},children:(0,s.jsx)(n.code,{children:"Role"})}),(0,s.jsx)(n.td,{style:{textAlign:"left"},children:"A role option"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{style:{textAlign:"left"},children:(0,s.jsx)(n.code,{children:"MentionableOption"})}),(0,s.jsxs)(n.td,{style:{textAlign:"left"},children:[(0,s.jsx)(n.code,{children:"GuildMember"})," | ",(0,s.jsx)(n.code,{children:"Role"})," | ",(0,s.jsx)(n.code,{children:"User"})]}),(0,s.jsx)(n.td,{style:{textAlign:"left"},children:"A mentionable option"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{style:{textAlign:"left"},children:(0,s.jsx)(n.code,{children:"AttachmentOption"})}),(0,s.jsx)(n.td,{style:{textAlign:"left"},children:(0,s.jsx)(n.code,{children:"AttachmentOption"})}),(0,s.jsx)(n.td,{style:{textAlign:"left"},children:"An attachment option"})]})]})]}),"\n",(0,s.jsx)(n.h2,{id:"autocomplete",children:"Autocomplete"}),"\n",(0,s.jsx)(n.p,{children:"To add autocomplete to your Slashcommand you will need a interceptor first. This class will intercept all requests from the user after typing in the autocomplete option field"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",metastring:'title="anime.interceptor.ts"',children:"import { Injectable } from '@nestjs/common';\nimport { AutocompleteInteraction } from 'discord.js';\nimport { AutocompleteInterceptor } from '@globalart/nestcord';\n\n@Injectable()\nclass AnimeAutocompleteInterceptor extends AutocompleteInterceptor {\n    public transformOptions(interaction: AutocompleteInteraction) {\n        const focused = interaction.options.getFocused(true);\n        let choices: string[];\n\n        if (focused.name === 'anime') {\n            choices = ['Hunter x Hunter', 'Naruto', 'One Piece'];\n        }\n\n        return interaction.respond(\n            choices\n                .filter(choice => choice.startsWith(focused.value.toString()))\n                .map(choice => ({ name: choice, value: choice }))\n        );\n    }\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["You'll then have to add ",(0,s.jsx)(n.code,{children:"autocomplete: true"})," to your options class:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",metastring:'title="anime.dto.ts"',children:"import { StringOption } from '@globalart/nestcord';\n\nexport class AnimeDto {\n    @StringOption({\n        name: 'anime',\n        description: 'The anime to look up',\n        autocomplete: true,\n        required: true\n    })\n    anime: string;\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"And last but not least, apply the interceptor to your slash command"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",metastring:'title="anime-commands.service.ts"',children:"import { Injectable, UseInterceptors } from '@nestjs/common';\nimport { Context, SlashCommand, Options, SlashCommandContext } from '@globalart/nestcord';\nimport { AnimeDto } from '/anime.dto';\nimport { AnimeAutocompleteInterceptor } from './anime.interceptor';\n\n@Injectable()\nexport class AnimeCommands {\n    @UseInterceptors(AnimeAutocompleteInterceptor)\n    @SlashCommand({\n        name: 'anime',\n        description: 'Lookup information about an anime'\n    })\n    public async onSearch(@Context() [interaction]: SlashCommandContext, @Options() { anime }: AnimeDto) {\n        return interaction.reply({content: `I found the anime ${anime}`});\n    }\n}\n"})}),"\n",(0,s.jsx)(n.h2,{id:"groups",children:"Groups"}),"\n",(0,s.jsxs)(n.admonition,{type:"tip",children:[(0,s.jsx)(n.mdxAdmonitionTitle,{children:(0,s.jsx)(n.strong,{children:"TIP"})}),(0,s.jsx)(n.p,{children:"For those developers looking to make more organized and complex groups of commands, look no further than subgroups and groups."})]}),"\n",(0,s.jsxs)(n.p,{children:["Use ",(0,s.jsx)(n.code,{children:"SlashGroup"})," decorators on class-level ",(0,s.jsx)(n.code,{children:"(Group)"})," and method-level ",(0,s.jsx)(n.code,{children:"(SubGroup)"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",metastring:'title="utils-commands.service.ts"',children:"import {createCommandGroupDecorator, Subcommand} from '@globalart/nestcord';\n\nexport const UtilsCommandDecorator = createCommandGroupDecorator({\n    name: 'utils',\n    description: 'Utils group',\n});\n\n@UtilsCommandDecorator()\nexport class UtilsCommands {\n    @Subcommand({\n        name: 'ping',\n        description: 'Ping-pong command'\n    })\n    public async onPing(...) {\n    ...\n    }\n}\n\n@UtilsCommandDecorator({\n    name: 'string',\n    descriptionn: 'String utility commands'\n})\nexport class UtilsStringCommands {\n    @Subcommand({\n        name: 'length',\n        description: 'String length command'\n    })\n    public async onLength(...) {\n    ...\n    }\n}\n\n\n"})})]})}function m(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(a,{...e})}):a(e)}}}]);