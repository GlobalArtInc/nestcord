"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[179],{6157:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>r,default:()=>p,frontMatter:()=>i,metadata:()=>s,toc:()=>l});var o=t(6070),a=t(5710);const i={id:"pagination",title:"Pagination",sidebar_position:1},r=void 0,s={id:"recipes/pagination",title:"Pagination",description:"Certainly! Pagination is a useful technique employed in user interfaces to present large amounts of information in a structured and",source:"@site/content/recipes/pagination.md",sourceDirName:"recipes",slug:"/recipes/pagination",permalink:"/recipes/pagination",draft:!1,unlisted:!1,editUrl:"https://github.com/GlobalArtInc/nestcord/tree/master/docs/content/recipes/pagination.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{id:"pagination",title:"Pagination",sidebar_position:1},sidebar:"docsSidebar",previous:{title:"Defer command",permalink:"/interceptors/defer-interceptor"},next:{title:"Localization",permalink:"/recipes/localization"}},c={},l=[{value:"Usage",id:"usage",level:2}];function d(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.p,{children:"Certainly! Pagination is a useful technique employed in user interfaces to present large amounts of information in a structured and\nmanageable way. When dealing with substantial volumes of data, such as search results, articles, or product listings, presenting it all at\nonce can overwhelm users and lead to a poor user experience. Pagination allows you to divide the information into smaller, organized chunks,\nenhancing user engagement and ease of navigation. This module allows you to create a pagination with a few lines of code."}),"\n",(0,o.jsx)(n.h2,{id:"usage",children:"Usage"}),"\n",(0,o.jsxs)(n.p,{children:["Once the installation process is complete, we can import the ",(0,o.jsx)(n.code,{children:"NestCordPaginationModule"})," with your ",(0,o.jsx)(n.code,{children:"NestCordModule"})," into the root ",(0,o.jsx)(n.code,{children:"AppModule"}),":"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-typescript",children:"import { NestCordModule } from '@globalart/nestcord';\nimport { Module } from '@nestjs/common';\nimport { NestCordPaginationModule } from '@globalart/nestcord';\nimport { AppService } from './app.service';\n\n@Module({\n    imports: [\n        NestCordModule.forRoot({\n            token: 'DISCORD_BOT_TOKEN',\n            intents: ['Guilds', 'GuildMessages', 'DirectMessages']\n        }),\n        NestCordPaginationModule.forRoot({\n            // Change your buttons appearance\n            buttons: {},\n            // Add buttons for skip to first and last page\n            allowSkip: true,\n            // Add buttons for search page\n            allowTraversal: true\n        })\n    ],\n    providers: [AppService]\n})\nexport class AppModule {}\n"})}),"\n",(0,o.jsxs)(n.p,{children:["Then, we can inject the ",(0,o.jsx)(n.code,{children:"PaginationService"})," into our service and register a pagination handler:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-typescript",children:"import { OnModuleInit, Injectable } from '@nestjs/common';\nimport { NestCordPaginationService, PageBuilder } from '@globalart/nestcord/pagination';\nimport { Context, SlashCommand, SlashCommandContext } from '@globalart/nestcord';\n\n@Injectable()\nexport class AppService implements OnModuleInit {\n    public constructor(private readonly paginationService: NestCordPaginationService) {\n    }\n\n    public onModuleInit(): void {\n        return this.paginationService.register(builder =>\n            builder\n                // Required, need for search your builder\n                .setCustomId('test')\n                // First way to set pages\n                .setPages([\n                    new PageBuilder().setContent('Page 1'),\n                    new PageBuilder().setContent('Page 2'),\n                    new PageBuilder().setContent('Page 3'),\n                    new PageBuilder().setContent('Page 4'),\n                    new PageBuilder().setContent('Page 5')\n                ])\n                // Second way, you can manually set pages using `setPages` method\n                .setPagesFactory(page => new PageBuilder().setContent(`Page ${page}`))\n                // Optional, only if you want to use pages factory\n                .setMaxPages(5)\n        );\n    }\n\n    @SlashCommand({ name: 'pagination', description: 'Test pagination' })\n    public async onPagination(@Context() [interaction]: SlashCommandContext) {\n        const pagination = this.paginationService.get('test');\n        const page = await pagination.build();\n\n        return interaction.reply(page);\n    }\n}\n"})}),"\n",(0,o.jsxs)(n.p,{children:["Congratulations! You have successfully created your first pagination!\nJust use ",(0,o.jsx)(n.code,{children:"pagination"})," command and you will see your pagination!"]})]})}function p(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},5710:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>s});var o=t(758);const a={},i=o.createContext(a);function r(e){const n=o.useContext(i);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:r(e.components),o.createElement(i.Provider,{value:n},e.children)}}}]);