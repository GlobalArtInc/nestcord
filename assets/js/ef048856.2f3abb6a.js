"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[6823],{3778:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>l,contentTitle:()=>r,default:()=>g,frontMatter:()=>s,metadata:()=>a,toc:()=>c});const a=JSON.parse('{"id":"packages/pagination","title":"Pagination","description":"Certainly! Pagination is a valuable technique in user interfaces for displaying large amounts of information in a structured and manageable way. When dealing with extensive data, such as search results, articles, or product listings, showing everything at once can overwhelm users and degrade the user experience. Pagination breaks down the information into smaller, organized sections, enhancing user engagement and ease of navigation. This module allows you to implement pagination with just a few lines of code.","source":"@site/content/packages/pagination.mdx","sourceDirName":"packages","slug":"/packages/pagination","permalink":"/packages/pagination","draft":false,"unlisted":false,"editUrl":"https://github.com/GlobalArtInc/nestcord/tree/master/docs/content/packages/pagination.mdx","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"id":"pagination","title":"Pagination","sidebar_position":1},"sidebar":"docsSidebar","previous":{"title":"Defer command","permalink":"/interceptors/defer-interceptor"},"next":{"title":"Localization","permalink":"/packages/localization"}}');var i=t(7968),o=t(4318);const s={id:"pagination",title:"Pagination",sidebar_position:1},r=void 0,l={},c=[{value:"Usage",id:"usage",level:2},{value:"Buttons pagination",id:"buttons-pagination",level:3},{value:"Select Menu Pagination",id:"select-menu-pagination",level:3}];function d(n){const e={code:"code",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,o.R)(),...n.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(e.p,{children:"Certainly! Pagination is a valuable technique in user interfaces for displaying large amounts of information in a structured and manageable way. When dealing with extensive data, such as search results, articles, or product listings, showing everything at once can overwhelm users and degrade the user experience. Pagination breaks down the information into smaller, organized sections, enhancing user engagement and ease of navigation. This module allows you to implement pagination with just a few lines of code."}),"\n",(0,i.jsx)(e.h2,{id:"usage",children:"Usage"}),"\n",(0,i.jsxs)(e.p,{children:["Once the installation process is complete, we can import the ",(0,i.jsx)(e.code,{children:"NestCordPaginationModule"})," with your ",(0,i.jsx)(e.code,{children:"NestCordModule"})," into the root ",(0,i.jsx)(e.code,{children:"AppModule"}),":"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-typescript",children:"import { NestCordModule } from '@globalart/nestcord';\nimport { Module } from '@nestjs/common';\nimport { NestCordPaginationModule } from '@globalart/nestcord';\nimport { AppService } from './app.service';\n\n@Module({\n    imports: [\n        NestCordModule.forRoot({\n            token: 'DISCORD_BOT_TOKEN',\n            intents: ['Guilds', 'GuildMessages', 'DirectMessages']\n        }),\n        NestCordPaginationModule.forRoot()\n    ],\n    providers: [AppService]\n})\nexport class AppModule {}\n"})}),"\n",(0,i.jsxs)(e.p,{children:["Then, we can inject the ",(0,i.jsx)(e.code,{children:"PaginationService"})," into our service and register a pagination handler:"]}),"\n",(0,i.jsx)(e.h3,{id:"buttons-pagination",children:"Buttons pagination"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-typescript",children:"import { OnModuleInit, Injectable } from '@nestjs/common';\nimport { NestCordPaginationService, PageBuilder } from '@globalart/nestcord/pagination';\nimport { Context, SlashCommand, PaginatorTypeEnum, SlashCommandContext } from '@globalart/nestcord';\n\n@Injectable()\nexport class AppService implements OnModuleInit {\n    public constructor(private readonly paginationService: NestCordPaginationService) {\n    }\n\n    public onModuleInit(): void {\n        this.paginationService.register(PaginatorTypeEnum.BUTTONS, (builder) =>\n            builder\n              .setCustomId('test')\n        \n        );\n    }\n\n    @SlashCommand({ name: 'pagination', description: 'Test pagination' })\n    public async onPagination(@Context() [interaction]: SlashCommandContext) {\n        const pagination = this.paginationService.get<PaginatorTypeEnum.BUTTONS>('test');\n        pagination.setButtons([\n            [\n              { \n                customId: 'page1',\n                label: 'Page 1',\n                style: ButtonStyle.Secondary,\n              },\n              { \n                customId: 'page2',\n                label: 'Page 2',\n                style: ButtonStyle.Secondary,\n              }\n            ]\n        ]);\n        pagination.setPages([\n          new PageBuilder().setContent('Page 1'),\n          new PageBuilder().setContent('Page 2')\n        ]);\n        const page = await pagination.build(1);\n\n        return interaction.reply(page);\n    }\n}\n"})}),"\n",(0,i.jsx)(e.h3,{id:"select-menu-pagination",children:"Select Menu Pagination"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-typescript",children:"import { OnModuleInit, Injectable } from '@nestjs/common';\nimport { NestCordPaginationService, PageBuilder } from '@globalart/nestcord/pagination';\nimport { Context, SlashCommand, PaginatorTypeEnum, SlashCommandContext } from '@globalart/nestcord';\n\n@Injectable()\nexport class AppService implements OnModuleInit {\n    public constructor(private readonly paginationService: NestCordPaginationService) {\n    }\n\n    public onModuleInit(): void {\n        this.paginationService.register(PaginatorTypeEnum.SELECT_MENU, (builder) =>\n            builder\n              .setCustomId('test')\n        \n        );\n    }\n\n    @SlashCommand({ name: 'pagination', description: 'Test pagination' })\n    public async onPagination(@Context() [interaction]: SlashCommandContext) {\n        const pagination = this.paginationService.get<PaginatorTypeEnum.SELECT_MENU>('test');\n        pagination.setSelectMenuItems(this.setMenuItems());\n        pagination.setPages(this.setMenuPages());\n        const page = await pagination.build('page1');\n\n        return interaction.reply(page);\n    }\n\n    @StringSelect('nestcord-pagination/test')\n    async MenusInteraction(@Context() [interaction]: ButtonContext, @SelectedStrings() selected: string[]) {\n      const selectedPage = selected?.[0] || null;\n      const pagination = this.paginationService.get<PaginatorTypeEnum.SELECT_MENU>('menus');\n      pagination.setSelectMenuItems(this.setMenuItems());\n      pagination.setPages(this.setMenuPages());\n      const page = await pagination.build(selectedPage);\n\n      await interaction.update(page);\n    }\n\n    private readonly setMenuPages() {\n      return [\n        {\n          pageId: 'page1',\n          builder: new PageBuilder().setContent('Page 1'),\n        },\n        {\n          pageId: 'page2',\n          builder: new PageBuilder().setContent('Page 2'),\n        },\n      ];\n    }\n\n    private readonly setMenuItems() {\n      return [\n        {\n          label: 'Page 1',\n          value: 'page1',\n        },\n        {\n          label: 'Page 2',\n          value: 'page2',\n        },\n      ]\n    }\n}\n"})}),"\n",(0,i.jsxs)(e.p,{children:["Congratulations! You have successfully created your first pagination!\nJust use ",(0,i.jsx)(e.code,{children:"pagination"})," command and you will see your pagination!"]})]})}function g(n={}){const{wrapper:e}={...(0,o.R)(),...n.components};return e?(0,i.jsx)(e,{...n,children:(0,i.jsx)(d,{...n})}):d(n)}}}]);