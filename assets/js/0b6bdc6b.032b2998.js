"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[886],{1719:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>i,contentTitle:()=>o,default:()=>p,frontMatter:()=>c,metadata:()=>r,toc:()=>a});var l=t(6106),s=t(8123);const c={id:"message-components",title:"Message Components",sidebar_position:3},o=void 0,r={id:"interactions/message-components",title:"Message Components",description:"Message components \u2014 we'll call them \"components\" moving forward\u2014are a framework for adding interactive elements to the messages your app or bot sends. They're accessible, customizable, and easy to use.",source:"@site/content/interactions/message-components.md",sourceDirName:"interactions",slug:"/interactions/message-components",permalink:"/interactions/message-components",draft:!1,unlisted:!1,editUrl:"https://github.com/GlobalArtInc/nestcord/tree/master/docs/content/interactions/message-components.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{id:"message-components",title:"Message Components",sidebar_position:3},sidebar:"docsSidebar",previous:{title:"Context Menus",permalink:"/interactions/context-menus"},next:{title:"Modals",permalink:"/interactions/modals"}},i={},a=[{value:"Button",id:"button",level:2},{value:"Dynamic Button",id:"dynamic-button",level:3},{value:"Select Menu",id:"select-menu",level:2},{value:"String Select",id:"string-select",level:3},{value:"User Select",id:"user-select",level:3},{value:"Role Select",id:"role-select",level:3},{value:"Channel Select",id:"channel-select",level:3},{value:"Mentionable Select",id:"mentionable-select",level:3},{value:"Dynamic Select Menu",id:"dynamic-select-menu",level:3}];function d(e){const n={a:"a",code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"Message components"})," \u2014 we'll call them \"components\" moving forward\u2014are a framework for adding interactive elements to the messages your app or bot sends. They're accessible, customizable, and easy to use."]}),"\n",(0,l.jsx)(n.p,{children:"There are several different types of components; this documentation will outline the basics of this new framework and each example."}),"\n",(0,l.jsx)(n.h2,{id:"button",children:"Button"}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"Buttons"})," are interactive components that render on messages. They can be clicked by users, and send an ",(0,l.jsx)(n.a,{href:"https://discord.com/developers/docs/interactions/receiving-and-responding#interaction-object",children:"interaction"})," to your app when clicked."]}),"\n",(0,l.jsx)("img",{src:"/img/content/button.png",alt:"Buttons",width:"500"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-typescript",metastring:'title="src/app.components.ts"',children:"import { Injectable } from '@nestjs/common';\nimport { Context, Button, ButtonContext } from '@globalart/nestcord';\n\n@Injectable()\nexport class AppComponents {\n    @Button('BUTTON')\n    public onButton(@Context() [interaction]: ButtonContext) {\n        return interaction.reply({ content: 'Button clicked!' });\n    }\n}\n"})}),"\n",(0,l.jsx)(n.h3,{id:"dynamic-button",children:"Dynamic Button"}),"\n",(0,l.jsxs)(n.p,{children:["You can create buttons with dynamic ",(0,l.jsx)(n.code,{children:"id"})," field. This is useful for passing metadata to buttons."]}),"\n",(0,l.jsxs)(n.p,{children:["Dynamic buttons uses ",(0,l.jsx)(n.a,{href:"https://www.npmjs.com/package/path-to-regexp",children:"path-to-regexp"})," format to perform regexp matching. Turn a path string such as ",(0,l.jsx)(n.code,{children:"user/:name"})," into a regular expression."]}),"\n",(0,l.jsx)(n.p,{children:"To create a Dynamic button"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-typescript",children:"new ButtonBuilder()\n  .setCustomId('click/12345')\n  .setLabel('LABEL')\n  .setStyle(ButtonStyle.Primary)\n"})}),"\n",(0,l.jsx)(n.p,{children:"To receive a Dynamic button"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-typescript",children:"import { Injectable } from '@nestjs/common';\nimport { Context, Button, ButtonContext } from '@globalart/nestcord';\n\n@Injectable()\nexport class AppComponents {\n  @Button('click/:value')\n  public onButton(\n    @Context() [interaction]: ButtonContext,\n    @ComponentParam('value') value: string\n  ) {\n    return interaction.reply({ content: `Button clicked! Value: ${value}` });\n  }\n}\n\n"})}),"\n",(0,l.jsx)(n.h2,{id:"select-menu",children:"Select Menu"}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"Select menus"})," are another interactive component that renders on messages. On desktop, clicking on a select menu opens a dropdown-style UI; on mobile, tapping a select menu opens up a half-sheet with the options."]}),"\n",(0,l.jsx)("img",{src:"/img/content/select-menu.png",alt:"Select Menu",width:"500"}),"\n",(0,l.jsx)(n.p,{children:"Discord has introduced new select menu components :"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.code,{children:"String Select"})}),"\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.code,{children:"User Select"})}),"\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.code,{children:"Role Select"})}),"\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.code,{children:"Mentionable Select"})}),"\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.code,{children:"Channel Select"})}),"\n"]}),"\n",(0,l.jsx)(n.h3,{id:"string-select",children:"String Select"}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"String Select"})," is Select Menu for picking defined text options"]}),"\n",(0,l.jsx)(n.p,{children:"To create String Select:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-typescript",children:"new StringSelectMenuBuilder()\n  .setCustomId('STRING_SELECT_MENU') // replace with your customId\n  .setPlaceholder('Select your color')\n  .setMaxValues(1)\n  .setMinValues(1)\n  .setOptions([\n    { label: 'Red', value: 'Red' },\n    { label: 'Blue', value: 'Blue' },\n    { label: 'Yellow', value: 'Yellow' }\n  ])\n"})}),"\n",(0,l.jsx)(n.p,{children:"To receive a String Select:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-typescript",children:"import { Injectable } from '@nestjs/common';\nimport { Context, StringSelect, StringSelectContext, SelectedStrings } from '@globalart/nestcord';\n\n@Injectable()\nexport class AppComponents {\n    @StringSelect('STRING_SELECT_MENU')\n    public onStringSelect(\n      @Context() [interaction]: StringSelectContext,\n      @SelectedStrings() selected: string[]\n    ) {\n      return interaction.reply({\n        content: `Your selected color - ${selected.join(' ')}`\n      });\n    }\n}\n"})}),"\n",(0,l.jsx)(n.h3,{id:"user-select",children:"User Select"}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"User Select"})," are Select Menu for selecting users"]}),"\n",(0,l.jsx)(n.p,{children:"To create User Select:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-typescript",children:"new UserSelectMenuBuilder()\n  .setCustomId('USER_SELECT_MENU')\n  .setPlaceholder('Select a user')\n  .setMaxValues(1)\n  .setMinValues(1)\n"})}),"\n",(0,l.jsx)(n.p,{children:"To receive a User Select:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-typescript",children:"import { Injectable } from '@nestjs/common';\nimport { \n  Context,\n  UserSelect,\n  UserSelectContext,\n  SelectedUser,\n  ISelectedUser,\n  SelectedMembers,\n  ISelectedMembers\n} from '@globalart/nestcord';\n\n@Injectable()\nexport class AppComponents {\n    @UserSelect('USER_SELECT_MENU')\n    public onUserSelect(\n      @Context() [interaction]: UserSelectContext,\n      @SelectedUsers() users: ISelectedUsers, // Collection of users\n      @SelectedMembers() members: ISelectedMembers // Collection of members\n    ) {\n      interaction.reply({\n        content: `\n        Selected users - ${users.map(user => user.username).join(',')}\\n\n        Selected members - ${members.map(member => member.user?.username).join(',')}\n        `\n      });\n    }\n}\n"})}),"\n",(0,l.jsx)(n.h3,{id:"role-select",children:"Role Select"}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"Role Select"})," are Select Menu for selecting roles"]}),"\n",(0,l.jsx)(n.p,{children:"To create Role Select:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-typescript",children:"new RoleSelectMenuBuilder()\n  .setCustomId('ROLE_SELECT_MENU')\n  .setPlaceholder('Select a role')\n  .setMaxValues(1)\n  .setMinValues(1)\n"})}),"\n",(0,l.jsx)(n.p,{children:"To receive a Role Select:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-typescript",children:"import { Injectable } from '@nestjs/common';\nimport { \n  Context,\n  RoleSelect,\n  RoleSelectContext,\n  SelectedRole,\n  ISelectedRole,\n} from '@globalart/nestcord';\n\n@Injectable()\nexport class AppComponents {\n    @RoleSelect('ROLE_SELECT_MENU')\n    public onRoleSelect(\n      @Context() [interaction]: RoleSelectContext,\n      @SelectedRoles() roles: ISelectedRoles, // Collection of roles\n    ) {\n      interaction.reply({\n        content: `\n        Selected roles - ${roles.map(role => role.id).join(',')}\n        `\n      });\n    }\n}\n"})}),"\n",(0,l.jsx)(n.h3,{id:"channel-select",children:"Channel Select"}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"Channel Select"})," are Select Menu for selecting channels"]}),"\n",(0,l.jsx)(n.p,{children:"To create Channel Select:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-typescript",children:"new ChannelSelectMenuBuilder()\n  .setCustomId('CHANNEL_SELECT_MENU')\n  .setPlaceholder('Select a channel')\n  .setMaxValues(1)\n  .setMinValues(1)\n"})}),"\n",(0,l.jsx)(n.p,{children:"To receive a Channel Select:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-typescript",children:"import { Injectable } from '@nestjs/common';\nimport { \n  Context,\n  ChannelSelect,\n  ChannelSelectContext,\n  SelectedChannel,\n  ISelectedChannel,\n} from '@globalart/nestcord';\n\n@Injectable()\nexport class AppComponents {\n    @ChannelSelect('CHANNEL_SELECT_MENU')\n    public onChannelSelect(\n      @Context() [interaction]: ChannelSelectContext,\n      @SelectedChannels() channels: ISelectedChannels, // Collection of channels\n    ) {\n      interaction.reply({\n        content: `\n        Selected channels - ${channels.map(channel => channel.id).join(',')}\n        `\n      });\n    }\n}\n"})}),"\n",(0,l.jsx)(n.h3,{id:"mentionable-select",children:"Mentionable Select"}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"Mentionable Select"})," are Select Menu for selecting mentionables (users and roles)"]}),"\n",(0,l.jsx)(n.p,{children:"To create Mentionable Select:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-typescript",children:"new MentionableSelectMenuBuilder()\n  .setCustomId('MENTIONABLE_SELECT_MENU')\n  .setPlaceholder('Select a user/role')\n  .setMaxValues(1)\n  .setMinValues(1)\n"})}),"\n",(0,l.jsx)(n.p,{children:"To receive a Mentionable Select:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-typescript",children:"import { Injectable } from '@nestjs/common';\nimport { \n  Context,\n  MentionableSelect,\n  MentionableSelectContext,\n  SelectedUsers,\n  ISelectedUsers,\n  SelectedMembers,\n  ISelectedMembers,\n  SelectedRoles,\n  ISelectedRoles,\n} from '@globalart/nestcord';\n\n@Injectable()\nexport class AppComponents {\n    @MentionableSelect('MENTIONABLE_SELECT_MENU')\n    public onMentionableSelect(\n      @Context() [interaction]: MentionableSelectContext,\n      @SelectedUsers() users: ISelectedUsers,\n      @SelectedMembers() members: ISelectedMembers,\n      @SelectedRoles() roles: ISelectedRoles\n    ) {\n      return interaction.reply({\n        content: `\n        Selected users - ${users.map(user => user.username).join(',')}\\n\n        Selected members - ${members.map(member => member.user?.username).join(',')}\\n\n        Selected roles - ${roles.map(role => role.name).join(',')}\n        `\n      });\n    }\n}\n"})}),"\n",(0,l.jsx)(n.h3,{id:"dynamic-select-menu",children:"Dynamic Select Menu"}),"\n",(0,l.jsxs)(n.p,{children:["All of the Select Menu types, support Dynamic ",(0,l.jsx)(n.code,{children:"id"})," using ",(0,l.jsx)(n.a,{href:"https://www.npmjs.com/package/path-to-regexp",children:"path-to-regexp"})," format."]}),"\n",(0,l.jsx)(n.p,{children:"To create a Dynamic select menu"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-typescript",children:"new StringSelectMenuBuilder()\n  .setCustomId('preferences/color')\n  .setPlaceholder('Select a color')\n  .setMaxValues(1)\n  .setMinValues(1)\n  .setOptions([\n    { label: 'Red', value: 'Red' },\n    { label: 'Blue', value: 'Blue' },\n    { label: 'Yellow', value: 'Yellow' }\n  ])\n"})}),"\n",(0,l.jsx)(n.p,{children:"To receive a Dynamic select menu"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-typescript",children:"import { Injectable } from '@nestjs/common';\nimport { Context, StringSelect, StringSelectContext,SelectedStrings } from '@globalart/nestcord';\n\n@Injectable()\nexport class AppComponents {\n    @StringSelect('preferences/:item')\n\tpublic onPreferenceSelect(\n\t\t@Context() [interaction]: StringSelectContext,\n\t\t@SelectedStrings() values: string[],\n\t\t@ComponentParam('item') item: string\n\t) {\n\t\treturn interaction.reply({\n\t\t\tcontent: `\n      ${item} = ${values.join(',')}\\n\n      `\n\t\t});\n\t}\n}\n\n"})}),"\n",(0,l.jsx)(n.p,{children:"Dynamic select menus are compatible with :"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.code,{children:"StringSelect"})}),"\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.code,{children:"UserSelect"})}),"\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.code,{children:"RoleSelect"})}),"\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.code,{children:"MentionableSelect"})}),"\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.code,{children:"ChannelSelect"})}),"\n"]})]})}function p(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,l.jsx)(n,{...e,children:(0,l.jsx)(d,{...e})}):d(e)}},8123:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>r});var l=t(7378);const s={},c=l.createContext(s);function o(e){const n=l.useContext(c);return l.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),l.createElement(c.Provider,{value:n},e.children)}}}]);